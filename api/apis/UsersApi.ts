/* tslint:disable */
/* eslint-disable */
/**
 * RanobeNet
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NovelDtoForPublicListingPagedList,
    NovelDtoForPublicListingPagedListFromJSON,
    NovelDtoForPublicListingPagedListToJSON,
    UserDtoForMe,
    UserDtoForMeFromJSON,
    UserDtoForMeToJSON,
    UserDtoForPublic,
    UserDtoForPublicFromJSON,
    UserDtoForPublicToJSON,
    UserDtoForPublicListingPagedList,
    UserDtoForPublicListingPagedListFromJSON,
    UserDtoForPublicListingPagedListToJSON,
    UserDtoForSave,
    UserDtoForSaveFromJSON,
    UserDtoForSaveToJSON,
} from '../models';

export interface ApiV1UsersGetRequest {
    order?: ApiV1UsersGetOrderEnum;
    size?: number;
    page?: number;
    descending?: boolean;
}

export interface ApiV1UsersIdGetRequest {
    id: number;
}

export interface ApiV1UsersIdNovelsGetRequest {
    id: number;
    order?: ApiV1UsersIdNovelsGetOrderEnum;
    size?: number;
    page?: number;
    descending?: boolean;
}

export interface ApiV1UsersMePutRequest {
    userDtoForSave?: UserDtoForSave;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async apiV1UsersGetRaw(requestParameters: ApiV1UsersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserDtoForPublicListingPagedList>> {
        const queryParameters: any = {};

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.descending !== undefined) {
            queryParameters['descending'] = requestParameters.descending;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoForPublicListingPagedListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1UsersGet(requestParameters: ApiV1UsersGetRequest = {}, initOverrides?: RequestInit): Promise<UserDtoForPublicListingPagedList> {
        const response = await this.apiV1UsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1UsersIdGetRaw(requestParameters: ApiV1UsersIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserDtoForPublic>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1UsersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoForPublicFromJSON(jsonValue));
    }

    /**
     */
    async apiV1UsersIdGet(requestParameters: ApiV1UsersIdGetRequest, initOverrides?: RequestInit): Promise<UserDtoForPublic> {
        const response = await this.apiV1UsersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1UsersIdNovelsGetRaw(requestParameters: ApiV1UsersIdNovelsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NovelDtoForPublicListingPagedList>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1UsersIdNovelsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.descending !== undefined) {
            queryParameters['descending'] = requestParameters.descending;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{id}/novels`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NovelDtoForPublicListingPagedListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1UsersIdNovelsGet(requestParameters: ApiV1UsersIdNovelsGetRequest, initOverrides?: RequestInit): Promise<NovelDtoForPublicListingPagedList> {
        const response = await this.apiV1UsersIdNovelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1UsersMeGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserDtoForMe>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoForMeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1UsersMeGet(initOverrides?: RequestInit): Promise<UserDtoForMe> {
        const response = await this.apiV1UsersMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1UsersMePostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserDtoForMe>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/me`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoForMeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1UsersMePost(initOverrides?: RequestInit): Promise<UserDtoForMe> {
        const response = await this.apiV1UsersMePostRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1UsersMePutRaw(requestParameters: ApiV1UsersMePutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserDtoForMe>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserDtoForSaveToJSON(requestParameters.userDtoForSave),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoForMeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1UsersMePut(requestParameters: ApiV1UsersMePutRequest = {}, initOverrides?: RequestInit): Promise<UserDtoForMe> {
        const response = await this.apiV1UsersMePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1UsersGetOrderEnum {
    Id = 'id',
    Name = 'name',
    Modified = 'modified',
    Created = 'created'
}
/**
    * @export
    * @enum {string}
    */
export enum ApiV1UsersIdNovelsGetOrderEnum {
    Id = 'id',
    Title = 'title',
    Modified = 'modified',
    Created = 'created'
}
