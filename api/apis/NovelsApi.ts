/* tslint:disable */
/* eslint-disable */
/**
 * RanobeNet
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EpisodeDtoForMe,
    EpisodeDtoForMeFromJSON,
    EpisodeDtoForMeToJSON,
    EpisodeDtoForSave,
    EpisodeDtoForSaveFromJSON,
    EpisodeDtoForSaveToJSON,
    NovelDtoForMe,
    NovelDtoForMeFromJSON,
    NovelDtoForMeToJSON,
    NovelDtoForPublic,
    NovelDtoForPublicFromJSON,
    NovelDtoForPublicToJSON,
    NovelDtoForPublicListingPagedList,
    NovelDtoForPublicListingPagedListFromJSON,
    NovelDtoForPublicListingPagedListToJSON,
    NovelDtoForSave,
    NovelDtoForSaveFromJSON,
    NovelDtoForSaveToJSON,
} from '../models';

export interface ApiV1NovelsGetRequest {
    order?: ApiV1NovelsGetOrderEnum;
    size?: number;
    page?: number;
    descending?: boolean;
}

export interface ApiV1NovelsIdDeleteRequest {
    id: number;
}

export interface ApiV1NovelsIdEpisodesEpisodeIdDeleteRequest {
    id: number;
    episodeId: number;
}

export interface ApiV1NovelsIdEpisodesEpisodeIdGetRequest {
    id: number;
    episodeId: number;
}

export interface ApiV1NovelsIdEpisodesEpisodeIdPutRequest {
    id: number;
    episodeId: number;
    episodeDtoForSave?: EpisodeDtoForSave;
}

export interface ApiV1NovelsIdEpisodesPostRequest {
    id: number;
    episodeDtoForSave?: EpisodeDtoForSave;
}

export interface ApiV1NovelsIdGetRequest {
    id: number;
}

export interface ApiV1NovelsIdMeGetRequest {
    id: number;
}

export interface ApiV1NovelsIdPutRequest {
    id: number;
    novelDtoForSave?: NovelDtoForSave;
}

export interface ApiV1NovelsPostRequest {
    novelDtoForSave?: NovelDtoForSave;
}

/**
 * 
 */
export class NovelsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1NovelsGetRaw(requestParameters: ApiV1NovelsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NovelDtoForPublicListingPagedList>> {
        const queryParameters: any = {};

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.descending !== undefined) {
            queryParameters['descending'] = requestParameters.descending;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/novels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NovelDtoForPublicListingPagedListFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NovelsGet(requestParameters: ApiV1NovelsGetRequest = {}, initOverrides?: RequestInit): Promise<NovelDtoForPublicListingPagedList> {
        const response = await this.apiV1NovelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NovelsIdDeleteRaw(requestParameters: ApiV1NovelsIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1NovelsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/novels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1NovelsIdDelete(requestParameters: ApiV1NovelsIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiV1NovelsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1NovelsIdEpisodesEpisodeIdDeleteRaw(requestParameters: ApiV1NovelsIdEpisodesEpisodeIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1NovelsIdEpisodesEpisodeIdDelete.');
        }

        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling apiV1NovelsIdEpisodesEpisodeIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/novels/{id}/episodes/{episodeId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"episodeId"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1NovelsIdEpisodesEpisodeIdDelete(requestParameters: ApiV1NovelsIdEpisodesEpisodeIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiV1NovelsIdEpisodesEpisodeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1NovelsIdEpisodesEpisodeIdGetRaw(requestParameters: ApiV1NovelsIdEpisodesEpisodeIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EpisodeDtoForMe>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1NovelsIdEpisodesEpisodeIdGet.');
        }

        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling apiV1NovelsIdEpisodesEpisodeIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/novels/{id}/episodes/{episodeId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"episodeId"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EpisodeDtoForMeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NovelsIdEpisodesEpisodeIdGet(requestParameters: ApiV1NovelsIdEpisodesEpisodeIdGetRequest, initOverrides?: RequestInit): Promise<EpisodeDtoForMe> {
        const response = await this.apiV1NovelsIdEpisodesEpisodeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NovelsIdEpisodesEpisodeIdPutRaw(requestParameters: ApiV1NovelsIdEpisodesEpisodeIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EpisodeDtoForMe>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1NovelsIdEpisodesEpisodeIdPut.');
        }

        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling apiV1NovelsIdEpisodesEpisodeIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/novels/{id}/episodes/{episodeId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"episodeId"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EpisodeDtoForSaveToJSON(requestParameters.episodeDtoForSave),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EpisodeDtoForMeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NovelsIdEpisodesEpisodeIdPut(requestParameters: ApiV1NovelsIdEpisodesEpisodeIdPutRequest, initOverrides?: RequestInit): Promise<EpisodeDtoForMe> {
        const response = await this.apiV1NovelsIdEpisodesEpisodeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NovelsIdEpisodesPostRaw(requestParameters: ApiV1NovelsIdEpisodesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EpisodeDtoForMe>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1NovelsIdEpisodesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/novels/{id}/episodes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EpisodeDtoForSaveToJSON(requestParameters.episodeDtoForSave),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EpisodeDtoForMeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NovelsIdEpisodesPost(requestParameters: ApiV1NovelsIdEpisodesPostRequest, initOverrides?: RequestInit): Promise<EpisodeDtoForMe> {
        const response = await this.apiV1NovelsIdEpisodesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NovelsIdGetRaw(requestParameters: ApiV1NovelsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NovelDtoForPublic>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1NovelsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/novels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NovelDtoForPublicFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NovelsIdGet(requestParameters: ApiV1NovelsIdGetRequest, initOverrides?: RequestInit): Promise<NovelDtoForPublic> {
        const response = await this.apiV1NovelsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NovelsIdMeGetRaw(requestParameters: ApiV1NovelsIdMeGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NovelDtoForMe>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1NovelsIdMeGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/novels/{id}/me`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NovelDtoForMeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NovelsIdMeGet(requestParameters: ApiV1NovelsIdMeGetRequest, initOverrides?: RequestInit): Promise<NovelDtoForMe> {
        const response = await this.apiV1NovelsIdMeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NovelsIdPutRaw(requestParameters: ApiV1NovelsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NovelDtoForMe>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1NovelsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/novels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NovelDtoForSaveToJSON(requestParameters.novelDtoForSave),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NovelDtoForMeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NovelsIdPut(requestParameters: ApiV1NovelsIdPutRequest, initOverrides?: RequestInit): Promise<NovelDtoForMe> {
        const response = await this.apiV1NovelsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1NovelsPostRaw(requestParameters: ApiV1NovelsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NovelDtoForMe>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/novels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NovelDtoForSaveToJSON(requestParameters.novelDtoForSave),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NovelDtoForMeFromJSON(jsonValue));
    }

    /**
     */
    async apiV1NovelsPost(requestParameters: ApiV1NovelsPostRequest = {}, initOverrides?: RequestInit): Promise<NovelDtoForMe> {
        const response = await this.apiV1NovelsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ApiV1NovelsGetOrderEnum {
    Id = 'id',
    Title = 'title',
    Modified = 'modified',
    Created = 'created'
}
