/* tslint:disable */
/* eslint-disable */
/**
 * RanobeNet
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EpisodeDtoForPublic,
    EpisodeDtoForPublicFromJSON,
    EpisodeDtoForPublicFromJSONTyped,
    EpisodeDtoForPublicToJSON,
} from './EpisodeDtoForPublic';

/**
 * 
 * @export
 * @interface ChapterDtoForPublic
 */
export interface ChapterDtoForPublic {
    /**
     * 
     * @type {number}
     * @memberof ChapterDtoForPublic
     */
    type: ChapterDtoForPublicTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ChapterDtoForPublic
     */
    title?: string | null;
    /**
     * 
     * @type {Array<EpisodeDtoForPublic>}
     * @memberof ChapterDtoForPublic
     */
    episodes: Array<EpisodeDtoForPublic>;
}

/**
* @export
* @enum {string}
*/
export enum ChapterDtoForPublicTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}

export function ChapterDtoForPublicFromJSON(json: any): ChapterDtoForPublic {
    return ChapterDtoForPublicFromJSONTyped(json, false);
}

export function ChapterDtoForPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChapterDtoForPublic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'episodes': ((json['episodes'] as Array<any>).map(EpisodeDtoForPublicFromJSON)),
    };
}

export function ChapterDtoForPublicToJSON(value?: ChapterDtoForPublic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'title': value.title,
        'episodes': ((value.episodes as Array<any>).map(EpisodeDtoForPublicToJSON)),
    };
}

